# -*- coding: utf-8 -*-
"""Copy of Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kFeYXRky-RX1Mg6lmHN_uVfdZW3isZQg
"""

import pandas as pd


def wisdom_multiplication(x, y, length_check=True):
    # функция проверяет результат умножения двух значных чисел
    # возвращает True если результат верен, а иначе False
    a = (100 - ((100 - x) + (100 - y)))
    b = (100 - x) * (100 - y)
    if length_check:  # если значение аргумента True
        if len(str(
                b)) == 1:  # если второе число состоит из 1 цифры, то надо добавить перед ним '0'
            c = str(a) + '0' + str(b)
        else:  # если оба числа двухзначные
            c = str(a) + str(b)
    else:  # если значение аргумента - False
        c = str(a) + str(b)
    if int(c) == x * y:  # проверяем равенство итогового числа и произведения заданных чисел
        return True
    else:
        return False


def color(val):
    # ф. меняет цвет числа если там содержится буква n // чтоб по значению - не смог победить))
    if 'n' in val:  # красный цвет если результат неверный/ где не работает схема мудреца
        color = 'red'
    elif 'y' in val:  # зеленый цвет если результат верный / где добавляли нуль - '0'
        color = 'green'
    else:
        color = 'black'  # черный цвет если результат верный/ где не работает схема мудреца

    return 'color: %s' % color


def multiplication_check_list(start=10, stop=99, length_check=True):
    # функция запускает проверку чисел из заданного диапазона 
    # возвращает список всех ответов (верных и неверных)
    k = 0
    v = 0
    for i in range(start, stop + 1):
        for j in range(start, stop + 1):
            if wisdom_multiplication(i, j,
                                     length_check):  # правильные результаты
                k += 1
                elem_a = (100 - ((100 - i) + (100 - j)))
                elem_b = (100 - (i)) * (100 - (j))
                if len(str(elem_b)) == 1:
                    file[i - start][j - start] = str(elem_a) + '0' + str(
                        elem_b) + 'y'
                else:
                    file[i - start][j - start] = str(i) + '*' + str(j)
            #                file.style.applymap(color(file[i-start][j-start]))
            else:  # неправильные результаты
                v += 1
                #                List_false.append((i-start, j-start))
                file[i - start][j - start] = str(i) + '*' + str(j) + 'n'

    print('Правильных результатов:', k, 'Неправильных результатов:', v)


start = 10
stop = 99
# List_false = [] # массив для индексов результатов
M = [[None for i in range(stop - start + 1)] for j in range(stop - start + 1)]
file = pd.DataFrame(M)  # .style
multiplication_check_list(start, stop, length_check=True)
file.tail()  # посмотреть последние 5 строк таблицы

ds = file.style.applymap(color)  # меняем цвет чисел в таблице

with open('56_file.html', 'w') as f:
    f.write(ds.render())
